# src/main/resources/application.properties
# Main Configuration - Works for both local and production

spring.application.name=AlgoArena-Backend

# Profile Configuration - Default to local, production sets this via environment variable
spring.profiles.active=local

# Server Configuration - Dynamic port for Render
server.port=${PORT:8080}
server.servlet.context-path=/api

# MongoDB Configuration - Environment variable with fallback
spring.data.mongodb.uri=${MONGODB_URI:mongodb://localhost:27017/algoarena}

# Cache Configuration - Use Spring Boot's simple in-memory cache
spring.cache.type=simple

# OAuth2 Configuration - Environment variables with fallbacks
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:dummy}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:dummy}
spring.security.oauth2.client.registration.google.scope=email,profile
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/oauth2/callback/{registrationId}

spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID:dummy}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET:dummy}
spring.security.oauth2.client.registration.github.scope=user:email,read:user
spring.security.oauth2.client.registration.github.redirect-uri={baseUrl}/oauth2/callback/{registrationId}

# OAuth2 Providers (same for all environments)
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

spring.security.oauth2.client.provider.github.authorization-uri=https://github.com/login/oauth/authorize
spring.security.oauth2.client.provider.github.token-uri=https://github.com/login/oauth/access_token
spring.security.oauth2.client.provider.github.user-info-uri=https://api.github.com/user
spring.security.oauth2.client.provider.github.user-name-attribute=id

# JWT Configuration - Environment variable with fallback
app.jwt.secret=${JWT_SECRET:mySecretKey123456789012345678901234567890}
app.jwt.expiration=86400000
app.jwt.refresh-expiration=604800000

# Cloudinary Configuration - Environment variables with fallbacks
app.cloudinary.cloud-name=${CLOUDINARY_CLOUD_NAME:dummy}
app.cloudinary.api-key=${CLOUDINARY_API_KEY:dummy}
app.cloudinary.api-secret=${CLOUDINARY_API_SECRET:dummy}

# Piston API Configuration (same for all environments)
app.piston.api-url=https://emkc.org/api/v2/piston
app.piston.timeout=30000

# File Configuration (same for all environments)
app.file.max-file-size=10MB
app.file.max-request-size=50MB
app.file.images.max-size=2MB
app.file.images.allowed-types=image/jpeg,image/png,image/gif,image/webp
app.file.images.max-per-question=5
app.file.images.max-per-solution=10
app.file.html.max-size=500KB
app.file.html.max-per-solution=2

# CORS Configuration - Environment variable with fallback
app.cors.allowed-origins=${ALLOWED_ORIGINS:http://localhost:3000}
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=*
app.cors.allow-credentials=true

# Logging Configuration - Environment variable with fallback
logging.level.com.algoarena=${LOG_LEVEL:DEBUG}
logging.level.org.springframework.security=${SECURITY_LOG_LEVEL:DEBUG}
logging.level.org.springframework.web=INFO
logging.level.root=${ROOT_LOG_LEVEL:INFO}

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=${HEALTH_DETAILS:when-authorized}
management.endpoint.health.show-components=${HEALTH_COMPONENTS:when-authorized}
management.info.env.enabled=${INFO_ENV:true}

# JPA Configuration (Prevents warnings)
spring.jpa.open-in-view=false

# Jackson Configuration
spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.deserialization.fail-on-unknown-properties=false

# Error Handling Configuration - Environment variable with fallback
server.error.include-message=${ERROR_INCLUDE_MESSAGE:always}
server.error.include-binding-errors=${ERROR_INCLUDE_BINDING:always}
server.error.include-exception=false
server.error.include-stacktrace=${ERROR_INCLUDE_STACKTRACE:never}

# Development Configuration
spring.devtools.restart.enabled=${DEVTOOLS_RESTART:true}
spring.devtools.livereload.enabled=${DEVTOOLS_LIVERELOAD:true}